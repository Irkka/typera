@function base-values() {
  $base-values: (
    base: (
      font: (
        families: (),
        stacks: (
          serif: ('Times New Roman', serif),
          sans-serif: (Helvetica, sans-serif),
          monospace: ('Courier New', monospace),
          cursive: ('Parkavenue', cursive),
          fantasy: (Arnoldboecklin, fantasy)
        ),
        size: 16px,
        color: #111111
      ),
      heading: (
        font: (
        )
      )
    ),
    selectors: (
      elements: (
        text: ('a' 'abbr' 'address' 'blockquote' 'cite' 'code' 'del' 'dfn' 'h1' 'h2' 'h3' 'h4' 'h5' 'h6' 'ins' 'kbd' 'mark' 'p' 'pre' 'q' 's' 'samp' 'sub' 'sup' 'time' 'var'),
        image: ('img', 'figure', 'figcaption'),
        other: ('hr')
      ),
      classes: 'type' 'date' 'author' 'read-more'
    ),
    palette: (
      main-colors: (
        primary-color: red,
        aux-color: yellow,
        secondary-aux-color: blue,
        accent-color: green
      ),
      base: (
        gray: #111
      ),
      type: accented-analogic
    )
  );

  @return $base-values;
}

@function prepend-list($list, $value) {
  @return join($value, $list);
}

@function create-font-stack($font-stack, $font-family) {
  $font-family-name: nested-map-get($font-family, name);
  @return prepend-list($font-stack, $font-family-name);
}

@function configure-fonts($typera-base-values) {
  $local-generic-families: nested-map-get($typera-base-values, font-face local generic-families);
  $google-generic-families: nested-map-get($typera-base-values, font-face google generic-families);

  $all-generic-families: nested-map-merge($local-generic-families, $google-generic-families);

  $font-stacks: nested-map-get($typera-base-values, base font stacks);
  @each $font-generic-family, $font-stack in $font-stacks {
    $font-families: nested-map-get($all-generic-families, $font-generic-family);
    @if type-of($font-families) == list {
      $font-family: nth($font-families, 1);
      $font-family-stack: create-font-stack($font-stack, $font-family);
      $typera-base-values: nested-map-set($typera-base-values, base font stacks $font-generic-family, $font-family-stack);
      $font-family-stack-list: ();
      @each $font-family in $font-families {
        $font-family-stack: create-font-stack($font-stack, $font-family);
        $font-family-stack-list: append($font-family-stack-list, $font-family-stack);
      }
      $typera-base-values: nested-map-set($typera-base-values, base font families $font-generic-family, $font-family-stack-list);
    }
    @else {
      $font-family-stack: create-font-stack($font-stack, $font-families);
      $typera-base-values: nested-map-set($typera-base-values, base font stacks $font-generic-family, $font-family-stack);
      $typera-base-values: nested-map-set($typera-base-values, base font families $font-generic-family, $font-family-stack);
    }
  }

  @return $typera-base-values;
}

@function configure-typera($typera-base-values, $baseline-multiplier, $palette) {
  $typera-base-values: map-set($typera-base-values, palette, $palette);
  $typera-base-values: nested-map-merge(base-values(), $typera-base-values);

  $typera-base-values: configure-fonts($typera-base-values);

  $baseline: nested-map-get($typera-base-values, base font size) * $baseline-multiplier;
  $typera-base-values: map-set($typera-base-values, baseline, $baseline);

  @return $typera-base-values;
}
